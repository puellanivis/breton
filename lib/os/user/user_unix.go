// Code generated by Uses Names with Id instead of ID. DO NOT EDIT.
// The above line skips linter because we use functions with the name Id instead of ID, but the linter refuses to allow this.
// Wraps the golang standard library, unless it's Windows, then use NetLookup instead of DomainLookup first.

// +build !windows

package user

import (
	"os/user"
)

// Group represents a grouping of users.
//
// On POSIX systems Gid contains a decimal number representing the group ID.
type Group = user.Group

// User represents a user account.
type User = user.User

// LookupGroup looks up a group by name. If the group cannot be found, the
// returned error is of type UnknownGroupError.
func LookupGroup(name string) (*Group, error) {
	return user.LookupGroup(name)
}

// LookupGroupId looks up a group by groupid. If the group cannot be found, the
// returned error is of type UnknownGroupIdError.
func LookupGroupId(gid string) (*Group, error) {
	return user.LookupGroupId(gid)
}

// Current returns the current user.
func Current() (*User, error) {
	return user.Current()
}

// Lookup looks up a user by username. If the user cannot be found, the
// returned error is of type UnknownUserError.
func Lookup(username string) (*User, error) {
	return user.Lookup(username)
}

// LookupId looks up a user by userid. If the user cannot be found, the
// returned error is of type UnknownUserIdError.
func LookupId(uid string) (*User, error) {
	return user.LookupId(uid)
}

// CurrentHomeDir returns the home directory of the current user.
func CurrentHomeDir() (string, error) {
	me, err := user.Current()
	if err != nil {
		return "", err
	}

	return me.HomeDir, nil
}

// CurrentUsername returns the username of the current user.
func CurrentUsername() (string, error) {
	me, err := user.Current()
	if err != nil {
		return "", err
	}

	return me.Username, nil
}
