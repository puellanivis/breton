package sort

import (
	"{{.Lib}}"
	"sort"
)

// {{.Name}}Slice attaches the methods of sort.Interface to []{{.Type}}, sorting in increasing order.
type {{.Name}}Slice []{{.Type}}

func (p {{.Name}}Slice) Len() int           { return len(p) }
func (p {{.Name}}Slice) Less(i, j int) bool { return {{.Lib}}.Compare(p[i], p[j]) < 0 }
func (p {{.Name}}Slice) Swap(i, j int)      { p[i], p[j] = p[j], p[i] }

func (p {{.Name}}Slice) Compare(i, j int) int {
	return {{.Lib}}.Compare(p[i], p[j])
}
func (p {{.Name}}Slice) CompareFunc(x interface{}) func(int) int {
	e := x.({{.Type}})
	return func(i int) int {
		return {{.Lib}}.Compare(p[i], e)
	}
}

func (p {{.Name}}Slice) RadixRange() (int, int) {
	r := 0
	for _, s := range p {
		if len(s) > r {
			r = len(s)
		}
	}
	return 0, r * 8
}
func (p {{.Name}}Slice) RadixFunc(r int) RadixTest {
	n := r / 8
	mask := byte(1 << uint(7-(r&0x7)))

	return func(i int) bool {
		if n >= len(p[i]) {
			return false
		}

		return p[i][n]&mask != 0
	}
}

// Sort is a convenience method.
func (p {{.Name}}Slice) Sort()  { radix(p) }
func (p {{.Name}}Slice) Radix() { radix(p) }

func (p {{.Name}}Slice) Search(x {{.Type}}) int      { return Search{{.Name}}s(p, x) }
func (p {{.Name}}Slice) SearchFor(x interface{}) int { return Search{{.Name}}s(p, x.({{.Type}})) }

// Sort{{.Name}}s sorts a slice of {{.Type}}s in increasing order.
func {{.Name}}s(a []{{.Type}}) { radix({{.Name}}Slice(a)) }

//Search{{.Name}}s searches for x in a sorted slice of {{.Type}}s and returns the index
// as specified by sort.Search.  The return value is the index to insert x if x is not present (it could be len(a)).
// The slice must be sorted in ascending order.
func Search{{.Name}}s(a []{{.Type}}, x {{.Type}}) int {
	return sort.Search(len(a), func(i int) bool { return {{.Lib}}.Compare(a[i], x) >= 0 })
}

// {{.Name}}sAreSorted tests whether a slice of {{.Type}}s is sorted in increasing order.
func {{.Name}}sAreSorted(a []{{.Type}}) bool { return sort.IsSorted({{.Name}}Slice(a)) }
