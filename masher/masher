#!/bin/bash

if ! type -p docker > /dev/null 2>&1 ; then
	echo "Please install docker" >&2
	exit 1
fi

if [[ -z ${MASHER_ROOT} ]]; then
	echo "Please setup build environment" >&2
	exit 1
fi

if [[ -n ${bamboo_DOCKER_REGISTRY} ]]; then
	DOCKER_REGISTRY="${bamboo_DOCKER_REGISTRY}"
	PROD="true"
fi

if [[ -n ${bamboo_docker_registry} ]]; then
	DOCKER_REGISTRY="${bamboo_docker_registry}"
	PROD="true"
fi

PROJECT="${PWD##*/}"
REGISTRY="${DOCKER_REGISTRY}"

RUNAS="${UID}"
if [[ -n ${DOCKER_MACHINE_NAME} ]]; then
	RUNAS=1000
fi

DARWIN=""
LINUX=""
OPENBSD=""
WINDOWS=""
ARM64=""
if [[ -n ${MASHALL} ]]; then
	DARWIN="--darwin"
	LINUX="--linux"
	WINDOWS="--windows"
	OPENBSD="--openbsd"
else
	case "${OSTYPE}" in
	darwin*)
		DARWIN="--darwin"
	;;
	linux*)
		LINUX="--linux"
	;;
	openbsd*)
		OPENBSD="--openbsd"
	;;
	cygwin*|msys*)
		WINDOWS="--windows"
	;;
	*) #I don't know, just make them all
		DARWIN="--darwin"
		LINUX="--linux"
		OPENSBD="--openbsd"
		WINDOWS="--windows"
	;;
	esac
fi

CPU="$( uname -m )"
case $CPU in
arm64)
	ARM64="--arm64"
;;
esac

while [[ $# -gt 0 ]]; do
	key="$1"
	val="${key#*=}"

	case "$key" in
	--image=*)
		IMAGE="$val"
	;;
	--registry=*)
		REGISTRY="$val"
	;;

	--arm64)
		ARM64="--arm64"
	;;
	--x86_64|--amd64)
		ARM64=""
	;;

	--darwin)
		DARWINFLAG="--darwin"
	;;
	--debian)
		LINUXFLAG="--deb"
	;;
	--linux)
		LINUXFLAG="--linux"
	;;
	--openbsd)
		OPENBSDFLAG="--openbsd"
	;;
	--windows)
		WINDOWSFLAG="--windows"
	;;
	--all)
		DARWINFLAG="--darwin"
		LINUXFLAG="--linux"
		OPENBSDFLAG="--openbsd"
		WINDOWSFLAG="--windows"
	;;

	--pkgonly)
		DARWINFLAG=""
		LINUXFLAG="--deb"
		OPENBSDFLAG=""
		WINDOWSFLAG=""
	;;

	--localtest)
		LOCALTEST="true"
	;;
	--proto)
		DARWIN=""
		LINUX=""
		OPENBSD=""
		WINDOWS=""
		NODOCKER="true"
		PROTO="--proto"
		TEST="--notest"
	;;
	--allprotos)
		PROTO="--allprotos"
	;;

	--test)
		TEST="--test"
	;;
	--notest)
		TEST="--notest"
	;;
	--nobuild)
		BUILD="--nobuild"
	;;
	--noproto)
		PROTO="--noproto"
	;;
	--nodocker)
		NODOCKER="true"
	;;

	--prod)
		PROD="true"
	;;

	--shell)
		NODOCKER="true"
		ESCAPE="--shell"
		FLAGS="-it"	
		TEST="--notest"
	;;

	--)
		shift
		break
	;;
	--*)
		echo "unknown flag $key" >&2
		exit 1
	;;
	*)
		break
	;;
	esac
	shift
done

if [[ -n ${PROD} ]]; then
	DARWINFLAG="--darwin"
	LINUXFLAG="--linux"
	OPENBSDFLAG="--openbsd"
	WINDOWSFLAG="--windows"
	PROTO="--allprotos"
	TEST="--notest"
fi

if [[ -n ${REGISTRY} ]]; then
	REGISTRY="${REGISTRY%/}/"
fi

if ! type -p git > /dev/null 2>&1 ; then
	echo "Please install git" >&2
	exit 1
fi

inrepo="$( git rev-parse --is-inside-work-tree 2>&1 )"
if [[ $? -eq 0 ]]; then
	case "$inrepo" in
	fatal*) BRANCH="local" ;;
	false*) BRANCH="local" ;;
	*)
		HASHID="$(git rev-parse --short HEAD)"
		HEAD="$(git symbolic-ref HEAD 2>> /dev/null || git rev-parse HEAD)"
		BRANCH="$(basename ${HEAD})"
		BUILD_VERSION="$(git describe --tag --abbrev=0 2> /dev/null)"
	;;
	esac
else
	BRANCH="local"
fi

if [[ -z ${IMAGE} ]]; then
	IMAGE="$(echo "${USER}" | tr '[:upper:]' '[:lower:]' | grep -o '[^\\]*$')/masher"

	IMAGE="${IMAGE}:latest"
fi

if [[ -n "${DARWINFLAG}${LINUXFLAG}${OPENBSDFLAG}${WINDOWSFLAG}" ]]; then
	LINUX="$LINUXFLAG"
	DARWIN="$DARWINFLAG"
	OPENBSD="$OPENBSDFLAG"
	WINDOWS="$WINDOWSFLAG"
fi

if [[ ( -n ${PROD} ) && ( ${BRANCH} = "testing" ) ]]; then
	# if we're building prod in the testing branch, just build
	# the linux binary, it's the quickest, and a good test.
	# if that works, then it will move up the branches, which will
	# then compile the additional binaries.
	DARWIN=""
	OPENBSD=""
	WINDOWS=""
fi

if type -p go > /dev/null 2>&1 ; then
	GO_VERSION="$(go version)"
	GO_VERSION="${GO_VERSION#go version go}"
	GO_VERSION="${GO_VERSION%% *}"

	if [[ ${LINUX} != "--deb" ]]; then
		echo "Found local Go version: ${GO_VERSION}"

		case "${GO_VERSION}" in
		1.21|1.21.*|1.21[a-z]*)
			LOCALTEST="true"
		;;
		esac
	fi
fi

if [[ ( ${LOCALTEST} == "true" ) && ( ${TEST} != "--notest" ) ]] ; then
	if ls *.go > /dev/null 2>&1 ; then
		echo running \'go test\' locally first...
		go test || exit 1
	fi
fi

MASHER_ROOT="${MASHER_ROOT%/}"
PRJPATH="${PWD##*${MASHER_ROOT}/}"
BASE="${PWD%$PRJPATH}"

if [[ -z ${BASE} ]] ; then
	BASE="${PWD}"
	PRJPATH=""
fi

BASE="${BASE%/}/"

NAME="masher-${PROJECT}"
if [[ -z ${ESCAPE} ]]; then
	NAME="${NAME}-"
	[[ ${DARWIN} != "" ]] && NAME="${NAME}d"
	[[ ${LINUX} != "" ]] && NAME="${NAME}l"
	[[ ${OPENBSD} != "" ]] && NAME="${NAME}o"
	[[ ${WINDOWS} != "" ]] && NAME="${NAME}w"
	NAME=${NAME%-}
fi

echo "NAME='${NAME}'"
echo "BASE='${BASE}'"
echo "PRJPATH='${PRJPATH}'"
echo "PROJECT='${PROJECT}'"
echo "BRANCH='${BRANCH}'"
echo "HASHID='${HASHID}'"
if [[ -n ${BUILD_VERSION} ]]; then
	echo "BUILD_VERSION='${BUILD_VERSION}'"
	BUILD_VERSION="--buildver=${BUILD_VERSION}"
fi
if [[ -n ${GOPRIVATE} ]]; then
	echo "PRIVATE='${GOPRIVATE}'"
	PRIVATE="--private=${GOPRIVATE}"
fi

TIMESTAMP="$(date -u +"%Y%m%d.%H%M%S")"

echo Using image: ${IMAGE}
echo /bin/mash.sh ${ESCAPE} ${ARM64} ${DARWIN} ${LINUX} ${OPENBSD} ${WINDOWS} ${TEST} ${PROTO} ${BUILD} ${CACHE} ${PRIVATE} ${BUILD_VERSION} --timestamp=${TIMESTAMP} --id=${HASHID} $@

DOCKER_VERSION="$(docker --version)"
DOCKER_VERSION="${DOCKER_VERSION%%,*}"
DOCKER_VERSION="${DOCKER_VERSION##* }"
echo Found Docker version: ${DOCKER_VERSION}

case "${DOCKER_VERSION}" in
1.?|1.?.*) ;;
*)
	READONLY="--read-only"
	TMPFS="--tmpfs /tmp:size=1G,exec"
;;
esac

EXEC="exec"
if [[ ( -r Dockerfile.tmpl ) && ( -r Makefile ) ]]; then
	# Unless we've been told not to do docker, and if we are going
	# to build the linux binaries, we don't want to `exec` the `docker run`.
	if [[ ( ${NODOCKER} != "true" ) && ( -n ${LINUX} ) ]]; then
		unset EXEC
	fi
fi

[[ -n ${MASHER_PREFIX} ]] && PREFIX="/${MASHER_PREFIX#/}"
SRCROOT="/mash${PREFIX}/${MASHER_ROOT%/}"

[[ -n ${MASHER_LIBS} ]] || MASHER_LIBS="lib"
LIBS=""

# go env GOCACHE
[[ -d "${BASE}/.mash/cache" ]] || mkdir -p "${BASE}/.mash/cache"
CACHE="--cache=${SRCROOT}/.mash/cache"

# go modules
[[ -d "${BASE}/.mash/mod" ]] || mkdir -p "${BASE}/.mash/mod"
[[ -d "${BASE}/.mash/sumdb" ]] || mkdir -p "${BASE}/.mash/sumdb"

# godep stuff
DEP_CACHE=""
if [[ -r Gopkg.toml ]]; then
	[[ -d ${BASE}/.mash/dep ]] || mkdir "${BASE}/.mash/dep"
	DEP_CACHE="--volume ${BASE}/.mash/dep:/go/pkg/dep:rw"
fi

SAVE_IFS="${IFS}"
IFS=':'
for p in $MASHER_LIBS; do
	l=$(echo $p | cut -d= -f1)
	t=$(echo $p | cut -d= -f2)

	[[ -n $t ]] || t="$l"

	l="${BASE}$l"
	t="/go/src/$t"

	if [[ -d $l ]]; then
		case ${OSTYPE} in
		cygwin*)
			l="$(cygpath -w $l)"
		;;
		esac

		echo "$l => $t"
		LIBS="$LIBS --volume $l:$t"
	else
		echo "couldnâ€™t find $l!" >&2
		exit 1
	fi
done
IFS="${SAVE_IFS}"

if [[ -r debian/control ]]; then
	if [[ -r ./.gitignore ]]; then
		grep -qFx -e "debian/whoami" ./.gitignore || echo "debian/whoami" >> ./.gitignore
	fi

	echo "$(git config user.name) <$(git config user.email)>" > debian/whoami
fi

case ${OSTYPE} in
cygwin*)
	[[ -n ${ESCAPE} ]] && EXEC="${EXEC} winpty"
	BASE="$( cygpath -w "${BASE}" )"
;;
esac

${EXEC} docker run ${FLAGS} --rm \
	--name "${NAME}" \
	--net "host" \
	${READONLY} \
	${TMPFS} \
	--user "${RUNAS}" \
	--volume "${BASE}:${SRCROOT}:rw" \
	--volume "${BASE}/.mash/mod:/go/pkg/mod:rw" \
	--volume "${BASE}/.mash/sumdb:/go/pkg/sumdb:rw" \
	$DEP_CACHE \
	$LIBS \
	--workdir "${SRCROOT}/${PRJPATH}" \
	${IMAGE} \
	/bin/mash.sh ${ESCAPE} ${ARM64} ${DARWIN} ${LINUX} ${OPENBSD} ${WINDOWS} ${TEST} ${PROTO} ${BUILD} ${CACHE} ${PRIVATE} ${BUILD_VERSION} --timestamp="${TIMESTAMP}" --id="${HASHID}" "$@" || exit 1

if [[ $PROD == "true" ]]; then
	make push || exit 1
	make clean
else
	make image
fi
